// Strip the units from values
// @param {Number} $number - value to remove unit from
// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Return a value as `rem` using a base font size
// @param {Number} $pixels - Value in pixels
// @param {Number} $context - Value to divide against in pixels, defaults to Base font-size
// @return {Number} - Value in `rem`s
@function rem($pixels, $context: $base-font-size) {
  $pixels: strip-unit($pixels);
  $context: strip-unit($context);

  @return #{$pixels / $context}rem;
}

// Map Deep Get
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// Asset URL builder
// @access private
// @param {String} $type - Asset type, matching folder name
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the asset
@function asset($path-asset, $file) {
  @return url($path-base + '/' + $path-asset + '/' + $file);
}

// Image asset helper
// @access public
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the image
// @require {function} asset
@function image($file) {
  @return asset($path-images, $file);
}

// Font asset helper
// @access public
// @param {String} $file - Asset file name, including extension
// @return {URL} - A `url()` function leading to the font
// @require {function} asset
@function font($file) {
  @return asset($path-fonts, $file);
}
